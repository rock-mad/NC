TCP Server Code
Save this as tcp_server.c:

c
Copy code
// tcp_server.c

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <arpa/inet.h>

#define PORT 8080
#define MAX_BUFFER_SIZE 1024

int main() {
    int server_fd, new_socket, valread;
    struct sockaddr_in address;
    int addrlen = sizeof(address);
    char buffer[MAX_BUFFER_SIZE] = {0};

    // Create a socket
    if ((server_fd = socket(AF_INET, SOCK_STREAM, 0)) == 0) {
        perror("Socket creation failed");
        exit(EXIT_FAILURE);
    }

    // Set up server address struct
    address.sin_family = AF_INET;
    address.sin_addr.s_addr = INADDR_ANY;
    address.sin_port = htons(PORT);

    // Bind the socket to the address
    if (bind(server_fd, (struct sockaddr *)&address, sizeof(address)) < 0) {
        perror("Bind failed");
        exit(EXIT_FAILURE);
    }

    // Listen for incoming connections
    if (listen(server_fd, 3) < 0) {
        perror("Listen failed");
        exit(EXIT_FAILURE);
    }

    // Accept incoming connection
    if ((new_socket = accept(server_fd, (struct sockaddr *)&address, (socklen_t*)&addrlen)) < 0) {
        perror("Accept failed");
        exit(EXIT_FAILURE);
    }

    // Read data from the client using TCP
    valread = read(new_socket, buffer, MAX_BUFFER_SIZE);
    printf("Received message from client: %s\n", buffer);

    // Close the connection
    close(new_socket);
    close(server_fd);
    return 0;
}
TCP Client Code
Save this as tcp_client.c:

c
Copy code
// tcp_client.c

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <arpa/inet.h>

#define PORT 8080
#define MAX_BUFFER_SIZE 1024

int main() {
    int client_fd;
    struct sockaddr_in server_address;
    char message[MAX_BUFFER_SIZE];

    // Create a socket
    if ((client_fd = socket(AF_INET, SOCK_STREAM, 0)) == -1) {
        perror("Socket creation failed");
        exit(EXIT_FAILURE);
    }

    // Configure server address
    server_address.sin_family = AF_INET;
    server_address.sin_port = htons(PORT);

    if (inet_pton(AF_INET, "127.0.0.1", &server_address.sin_addr) <= 0) {
        perror("Invalid address/ Address not supported");
        exit(EXIT_FAILURE);
    }

    // Connect to the server
    if (connect(client_fd, (struct sockaddr *)&server_address, sizeof(server_address)) < 0) {
        perror("Connection Failed");
        exit(EXIT_FAILURE);
    }

    printf("Enter a message to send to the server: ");
    fgets(message, MAX_BUFFER_SIZE, stdin);

    // Send message to the server
    send(client_fd, message, strlen(message), 0);

    // Close the connection
    close(client_fd);
    return 0;
}
Compilation and Execution Commands
Open your terminal.
Navigate to the directory where you saved the code files.
Compile the Server:
sh
Copy code
gcc tcp_server.c -o tcp_server
Compile the Client:
sh
Copy code
gcc tcp_client.c -o tcp_client
Run the Server:
sh
Copy code
./tcp_server
Run the Client (in a new terminal or after stopping the server):
sh
Copy code
./tcp_client